{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Description": "CloudBees VPN Demo", 
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "AMI": "ami-173fbf16"
            }, 
            "ap-southeast-1": {
                "AMI": "ami-aa9ed2f8"
            }, 
            "ap-southeast-2": {
                "AMI": "ami-363eaf0c"
            }, 
            "eu-west-1": {
                "AMI": "ami-44939930"
            }, 
            "sa-east-1": {
                "AMI": "ami-dd6bb0c0"
            }, 
            "us-east-1": {
                "AMI": "ami-3275ee5b"
            }, 
            "us-west-1": {
                "AMI": "ami-66d1fc23"
            }, 
            "us-west-2": {
                "AMI": "ami-ecbe2adc"
            }
        }
    }, 
    "Outputs": {
        "URL": {
            "Description": "Newly created application URL", 
            "Value": {
                "Fn::Join": [
                    "", 
                    [
                        "CloudBeesVpnClient:", 
                        {
                            "Fn::GetAtt": [
                                "CloudBeesVpnClientInstance", 
                                "PublicIp"
                            ]
                        }, 
                        "\n", 
                        "SourceCodeServer:", 
                        {
                            "Fn::GetAtt": [
                                "SourceCodeServerInstance", 
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            }
        }
    }, 
    "Parameters": {
        "KeyName": {
            "Default": "cloudbees-vpn-demo", 
            "Description": "Name of and existing EC2 KeyPair to enable SSH access to the instance", 
            "Type": "String"
        }
    }, 
    "Resources": {
        "AttachGateway": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }, 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::VPCGatewayAttachment"
        }, 
        "CloudBeesVpnClientInstance": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/default/openvpn": {
                                "content": "Autostart=customer\n", 
                                "mode": "000644"
                            }, 
                            "/etc/openvpn/customer.conf": {
                                "mode": "000644", 
                                "source": "https://s3.amazonaws.com/cloudbees-vpn/beescloud/customer.conf"
                            }, 
                            "/var/log/openvpn/readme.txt": {
                                "content": "logs folder", 
                                "mode": "000644"
                            }
                        }, 
                        "packages": {
                            "yum": {
                                "httpd": [], 
                                "lynx": [], 
                                "openvpn": [], 
                                "telnet": []
                            }
                        }, 
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true", 
                                    "ensureRunning": "true"
                                }, 
                                "openvpn": {
                                    "enabled": "true", 
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }, 
                "Comment": "Install an CloudBeesVpnClient"
            }, 
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMI"
                    ]
                }, 
                "InstanceType": "t1.micro", 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "CloudBeesVpnClientNetworkInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "CloudBeesVpnClient"
                    }, 
                    {
                        "Key": "Application", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash\n", 
                                "######\n", 
                                "# CLOUDBEES VPN CONFIGURATION\n", 
                                "######\n", 
                                "sysctl -w net.ipv4.ip_forward=1\n", 
                                "iptables -t nat -A POSTROUTING -s 192.168.252.0/24 -j SNAT --to-source 192.168.1.10\n", 
                                "######\n", 
                                "# STANDARD CLOUDFORMATION SCRIPT (see vpc_single_instance_in_subnet.template)\n", 
                                "######\n", 
                                "yum update -y aws-cfn-bootstrap\n", 
                                "# Helper function\n", 
                                "function error_exit\n", 
                                "{\n", 
                                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", 
                                {
                                    "Ref": "CloudBeesVpnClientWaitHandle"
                                }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n", 
                                "# Install open vpn via CloudFormation::Init\n", 
                                "/opt/aws/bin/cfn-init -s ", 
                                {
                                    "Ref": "AWS::StackId"
                                }, 
                                " -r CloudBeesVpnClientInstance ", 
                                "         --region ", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "# Start up the cfn-hup daemon to listen for changes to the CloudBees VPN Client metadata\n", 
                                "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n", 
                                "# All done so signal success\n", 
                                "/opt/aws/bin/cfn-signal -e 0 -r \"CloudBees VPN Client setup complete\" '", 
                                {
                                    "Ref": "CloudBeesVpnClientWaitHandle"
                                }, 
                                "'\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "CloudBeesVpnClientIpAddress": {
            "Properties": {
                "Domain": "vpc", 
                "InstanceId": {
                    "Ref": "CloudBeesVpnClientInstance"
                }
            }, 
            "Type": "AWS::EC2::EIP"
        }, 
        "CloudBeesVpnClientNetworkInterface": {
            "Properties": {
                "GroupSet": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ], 
                "PrivateIpAddress": "192.168.1.5", 
                "SubnetId": {
                    "Ref": "Subnet"
                }
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "CloudBeesVpnClientWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "InboundAllNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "false", 
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "-1", 
                "RuleAction": "allow", 
                "RuleNumber": "100"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "InboundSSHNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "false", 
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }, 
                "PortRange": {
                    "From": "22", 
                    "To": "22"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "101"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "InstanceSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable SSH access via port 22", 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "80", 
                        "IpProtocol": "tcp", 
                        "ToPort": "80"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }, 
            "Type": "AWS::EC2::InternetGateway"
        }, 
        "NetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::NetworkAcl"
        }, 
        "OutBoundAllNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "true", 
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "-1", 
                "RuleAction": "allow", 
                "RuleNumber": "100"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "OutBoundResponsePortsNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "true", 
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "-1", 
                "RuleAction": "allow", 
                "RuleNumber": "102"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "Route": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "GatewayId": {
                    "Ref": "InternetGateway"
                }, 
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "RouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "SourceCodeServerInstance": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/httpd/conf.d/svn_repos.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "LoadModule dav_svn_module     modules/mod_dav_svn.so\n", 
                                            "LoadModule authz_svn_module   modules/mod_authz_svn.so\n", 
                                            "<Location /svn>\n", 
                                            "   DAV svn\n", 
                                            "   \n", 
                                            "   SVNParentPath /var/svn\n", 
                                            "   \n", 
                                            "   AuthType Basic\n", 
                                            "   AuthName \"Subversion Repository\"\n", 
                                            "   AuthUserFile /etc/httpd/subversion.passwd\n", 
                                            "   Require valid-user\n", 
                                            "</Location>"
                                        ]
                                    ]
                                }
                            }, 
                            "/etc/httpd/subversion.passwd": {
                                "content": {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "# john:doe\n", 
                                            "john:$apr1$fhK0VPL8$0mRD4G0RR6lgsDHwEYlhJ/\n", 
                                            "# cloudbees:cloudbees\n", 
                                            "cloudbees:$apr1$jyVzG0rQ$w/QQRwe5w7JEG8XdFmWfP0\n"
                                        ]
                                    ]
                                }
                            }
                        }, 
                        "packages": {
                            "yum": {
                                "git": [], 
                                "httpd": [], 
                                "lynx": [], 
                                "mod_dav_svn": [], 
                                "subversion": [], 
                                "telnet": []
                            }
                        }, 
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true", 
                                    "ensureRunning": "true"
                                }
                            }
                        }, 
                        "sources": {
                        }
                    }
                }, 
                "Comment": "Install a Source Code Server (git and svn)"
            }, 
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMI"
                    ]
                }, 
                "InstanceType": "t1.micro", 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SourceCodeServerNetworkInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SourceCodeServer"
                    }, 
                    {
                        "Key": "Application", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash\n", 
                                "######\n", 
                                "# SOURCE CODE REPOSITORIES\n", 
                                "######\n", 
                                "# install subversion before using executables 'svnadmin' and 'svn'\n", 
                                "# install httpd before using user 'apache'\n", 
                                "yum install -y subversion httpd mod_dav_svn\n", 
                                "## REATE REPO\n", 
                                "##\n", 
                                "mkdir /var/svn\n", 
                                "\n", 
                                "REPOS=cloudbees\n", 
                                "svnadmin create /var/svn/$REPOS\n", 
                                "chown -R apache:apache /var/svn/$REPOS\n", 
                                "chmod -R g+ws /var/svn/$REPOS\n", 
                                "\n", 
                                "REPOS=bees-shop\n", 
                                "svnadmin create /var/svn/$REPOS\n", 
                                "wget -O /tmp/bees-shop-clickstart.zip https://github.com/CloudBees-community/bees-shop-clickstart/archive/master.zip\n",
                                "unzip -d /tmp/ /tmp/bees-shop-clickstart.zip\n",
                                "svn import -m\"initial import\" /tmp/bees-shop-clickstart-master file:///var/svn/$REPOS/trunk --username cloudbees --password cloudbees\n", 
                                
                                "chown -R apache:apache /var/svn/$REPOS\n", 
                                "chmod -R g+ws /var/svn/$REPOS\n", 
                                "\n",
                                "#cleanup\n",
                                "rm -rf /tmp/bees-shop-clickstart.zip\n", 
                                "rm -rf /tmp/bees-shop-clickstart-master\n", 
                                "\n",
                                "######", 
                                "# STANDARD CLOUDFORMATION SCRIPT (see vpc_single_instance_in_subnet.template)", 
                                "######", 
                                "yum update -y aws-cfn-bootstrap\n", 
                                "# Helper function\n", 
                                "function error_exit\n", 
                                "{\n", 
                                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", 
                                {
                                    "Ref": "SourceCodeServerWaitHandle"
                                }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n", 
                                "# Install open vpn via CloudFormation::Init\n", 
                                "/opt/aws/bin/cfn-init -s ", 
                                {
                                    "Ref": "AWS::StackId"
                                }, 
                                " -r SourceCodeServerInstance ", 
                                "         --region ", 
                                {
                                    "Ref": "AWS::Region"
                                }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "# Start up the cfn-hup daemon to listen for changes to the CloudBees VPN Client metadata\n", 
                                "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n", 
                                "# All done so signal success\n", 
                                "/opt/aws/bin/cfn-signal -e 0 -r \"CloudBees VPN Client setup complete\" '", 
                                {
                                    "Ref": "SourceCodeServerWaitHandle"
                                }, 
                                "'\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SourceCodeServerIpAddress": {
            "Properties": {
                "Domain": "vpc", 
                "InstanceId": {
                    "Ref": "SourceCodeServerInstance"
                }
            }, 
            "Type": "AWS::EC2::EIP"
        }, 
        "SourceCodeServerNetworkInterface": {
            "Properties": {
                "GroupSet": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ], 
                "PrivateIpAddress": "192.168.1.50", 
                "SubnetId": {
                    "Ref": "Subnet"
                }
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SourceCodeServerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "Subnet": {
            "Properties": {
                "CidrBlock": "192.168.1.0/24", 
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "SubnetNetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }, 
                "SubnetId": {
                    "Ref": "Subnet"
                }
            }, 
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        }, 
        "SubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "Subnet"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "VPC": {
            "Properties": {
                "CidrBlock": "192.168.1.0/24", 
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }, 
            "Type": "AWS::EC2::VPC"
        }
    }
}
